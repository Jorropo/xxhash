// Code generated by command: go run avx512.go -out xxhash_avx512_amd64.s. DO NOT EDIT.

#include "textflag.h"

DATA ·initWideAvx512<>+0(SB)/8, $0x60ea27eeadc0b5d6
DATA ·initWideAvx512<>+8(SB)/8, $0xc2b2ae3d27d4eb4f
DATA ·initWideAvx512<>+16(SB)/8, $0x0000000000000000
DATA ·initWideAvx512<>+24(SB)/8, $0x61c8864e7a143579
GLOBL ·initWideAvx512<>(SB), NOSPLIT|NOPTR, $32

// func sum64avx512(b []byte) uint64
// Requires: AVX, AVX2, AVX512DQ, AVX512F, AVX512VL, BMI
TEXT ·sum64avx512(SB), NOSPLIT|NOFRAME, $0-32
	MOVQ         b_base+0(FP), AX
	MOVQ         b_len+8(FP), CX
	MOVQ         $0x9e3779b185ebca87, DX
	MOVQ         $0xc2b2ae3d27d4eb4f, BX
	MOVQ         $0x165667b19e3779f9, SI
	MOVQ         $0x85ebca77c2b2ae63, DI
	MOVQ         $0x27d4eb2f165667c5, R8
	LEAQ         (R8)(CX*1), R9
	TESTQ        CX, CX
	JZ           zero
	CMPQ         CX, $0x03
	JBE          loop_1
	CMPQ         CX, $0x07
	JBE          do_4
	CMPQ         CX, $0x1f
	JBE          loop_8
	VMOVDQU      ·initWideAvx512<>+0(SB), Y0
	MOVL         $0x0000001f, R9
	ANDNQ        CX, R9, R9
	ADDQ         AX, R9
	VPBROADCASTQ DX, Y1
	VPBROADCASTQ BX, Y2

loop_32:
	VMOVDQU      (AX), Y3
	ADDQ         $0x20, AX
	VPMULLQ      Y3, Y2, Y3
	VPADDQ       Y3, Y0, Y0
	VPROLQ       $0x1f, Y0, Y0
	VPMULLQ      Y0, Y1, Y0
	CMPQ         AX, R9
	JNE          loop_32
	VMOVQ        X0, R10
	MOVQ         R10, R9
	ROLQ         $0x01, R9
	VPEXTRQ      $0x01, X0, R11
	MOVQ         R11, R14
	ROLQ         $0x07, R14
	ADDQ         R14, R9
	VEXTRACTI128 $0x01, Y0, X0
	VMOVQ        X0, R12
	MOVQ         R12, R14
	ROLQ         $0x0c, R14
	ADDQ         R14, R9
	VPEXTRQ      $0x01, X0, R13
	VZEROUPPER
	MOVQ         R13, R14
	ROLQ         $0x12, R14
	ADDQ         R14, R9
	IMULQ        BX, R10
	ROLQ         $0x1f, R10
	IMULQ        DX, R10
	XORQ         R10, R9
	IMULQ        DX, R9
	ADDQ         DI, R9
	IMULQ        BX, R11
	ROLQ         $0x1f, R11
	IMULQ        DX, R11
	XORQ         R11, R9
	IMULQ        DX, R9
	ADDQ         DI, R9
	IMULQ        BX, R12
	ROLQ         $0x1f, R12
	IMULQ        DX, R12
	XORQ         R12, R9
	IMULQ        DX, R9
	ADDQ         DI, R9
	IMULQ        BX, R13
	ROLQ         $0x1f, R13
	IMULQ        DX, R13
	XORQ         R13, R9
	IMULQ        DX, R9
	ADDQ         DI, R9
	ADDQ         CX, R9
	ANDQ         $0x1f, CX
	CMPQ         CX, $0x08
	JB           skip_8

loop_8:
	MOVQ  (AX), R10
	ADDQ  $0x08, AX
	SUBQ  $0x08, CX
	IMULQ BX, R10
	ROLQ  $0x1f, R10
	IMULQ DX, R10
	XORQ  R10, R9
	ROLQ  $0x1b, R9
	IMULQ DX, R9
	ADDQ  DI, R9
	CMPQ  CX, $0x08
	JAE   loop_8

skip_8:
	CMPQ CX, $0x04
	JB   skip_4

do_4:
	MOVL  (AX), DI
	ADDQ  $0x04, AX
	SUBQ  $0x04, CX
	IMULQ DX, DI
	XORQ  DI, R9
	ROLQ  $0x17, R9
	IMULQ BX, R9
	ADDQ  SI, R9

skip_4:
	TESTQ CX, CX
	JZ    skip_1

loop_1:
	MOVBLZX (AX), DI
	INCQ    AX
	IMULQ   R8, DI
	XORQ    DI, R9
	ROLQ    $0x0b, R9
	IMULQ   DX, R9
	DECQ    CX
	JNZ     loop_1

skip_1:
	MOVQ  R9, AX
	SHRQ  $0x21, AX
	XORQ  AX, R9
	IMULQ BX, R9
	MOVQ  R9, AX
	SHRQ  $0x1d, AX
	XORQ  AX, R9
	IMULQ SI, R9
	MOVQ  R9, AX
	SHRQ  $0x20, AX
	XORQ  AX, R9
	MOVQ  R9, ret+24(FP)
	RET

zero:
	MOVQ $0xef46db3751d8e999, R9
	MOVQ R9, ret+24(FP)
	RET

// func writeBlocksAvx512(d *[4]uint64, b []byte) int
// Requires: AVX, AVX2, AVX512DQ, AVX512F, AVX512VL, BMI
TEXT ·writeBlocksAvx512(SB), NOSPLIT|NOFRAME, $0-40
	MOVQ         d+0(FP), AX
	MOVQ         b_base+8(FP), CX
	MOVQ         b_len+16(FP), DX
	VMOVDQU      (AX), Y0
	MOVQ         $0x9e3779b185ebca87, BX
	MOVQ         $0xc2b2ae3d27d4eb4f, SI
	MOVL         $0x0000001f, DI
	ANDNQ        DX, DI, DI
	MOVQ         DI, DX
	ADDQ         CX, DI
	VPBROADCASTQ BX, Y1
	VPBROADCASTQ SI, Y2

loop_32:
	VMOVDQU (CX), Y3
	ADDQ    $0x20, CX
	VPMULLQ Y3, Y2, Y3
	VPADDQ  Y3, Y0, Y0
	VPROLQ  $0x1f, Y0, Y0
	VPMULLQ Y0, Y1, Y0
	CMPQ    CX, DI
	JNE     loop_32
	VMOVDQU Y0, (AX)
	VZEROUPPER
	MOVQ    DX, ret+32(FP)
	RET
